[log]

[jrpc]
port = 8188
listen = 0.0.0.0

#asa
[(?i)cisco\.asa[a-z]{0,}\.(9|[0-9]{1,})\..*] # Register
linebeak = "\r\n" # lineBreak
# prompts
prompt.login = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}> $" #
prompt.login_enable = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}# $"
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)# $"
# modes
mode.login_or_login_enable = prompt.login, prompt.login_enable
mode.login = prompt.login
mode.login_enable = prompt.login_enable
mode.configure_terminal = prompt.configure_terminal
# transtions
transition.login_enable.configure_terminal = "configure terminal"
transition.configure_terminal.login_enable = "exit"
# error pattern
errs = "^ERROR: .*$"
# predefined encoding
encoding = ""

#ios
[(?i)cisco\.ios\..*]
linebeak="\n"
prompt.login = "^[[:alnum:]._-]+> ?$"
prompt.login_enable = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}#$"
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)#$"
# modes
mode.login_or_login_enable = prompt.login, prompt.login_enable
mode.login = prompt.login
mode.login_enable = prompt.login_enable
mode.configure_terminal = prompt.configure_terminal
# transtions
transition.login_enable.configure_terminal = "config terminal"
transition.configure_terminal.login_enable = "exit"
# error pattern
errs = "^Command authorization failed\\.$", "^% ", "^Command rejected:"
# predefined encoding
encoding = ""

#nxos
[(?i)cisco\.NX-OS\..*]
linebeak="\n"
prompt.login = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}# $"
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)# $"
# modes
mode.login = prompt.login
mode.configure_terminal = prompt.configure_terminal
# transtions
transition.login.configure_terminal = "configure"
transition.configure_terminal.login = "exit"
# error pattern
errs = "^Command authorization failed\\.$", "^% ", "^% Invalid command at '\\^' marker\\."
# predefined encoding
encoding = ""

#g600
[(?i)brocade\.g600\..*]
linebeak="\n"
prompt.login = "(.*){1,}:([[:alnum:]]+){0,}> "
prompt.option = "\\[no\\] $"
# modes
mode.login = prompt.login, prompt.option
# transtions

# error pattern
errs = "^ERROR: "
# predefined encoding
encoding = ""

#fw1000
[(?i)dptech\.fw1000\..*]
linebeak="\n"
prompt.login = "<[[:alnum:]\-_.]+>"
prompt.configure = "[[[:alnum:]\-_.]+]"
# modes
mode.login = prompt.login
mode.configure = prompt.configure
# transtions
transition.login.configure = "conf-mode"
transition.configure.login = "end"
# error pattern
errs = "% Unknown command\\."
# predefined encoding
encoding = ""

#fortigate
[(?i)fortinet\.FortiGate-VM64-KVM\..*]
linebeak="\n"
prompt.login = "[[:alnum:]]{1,}[[:alnum:]-_]{0,} (#|\$) $"
# modes
mode.login = prompt.login
# transtions

# error pattern
errs = "^Unknown action 0$", " # Unknown action 0$", "^command parse error", "^value parse error", "^Command fail. Return code", " # Command fail. Return code", "^please use 'end' to return to root shell", "^entry not found in datasource", "^node_check_object fail"  
# predefined encoding
encoding = ""

#secpath
[(?i)h3c\.secpath\..*]
linebeak="\n"
prompt.login = "<[-_[:alnum:][:digit:]]{0,}>$"
prompt.systemView = "\[[-_[:alnum:][:digit:]]{0,}]$"
# modes
mode.login = prompt.login
mode.systemView = prompt.systemView
# transtions
transition.login.systemView = "system-view"
transition.systemView.login = "quit"
# error pattern
errs = "^ % "   
# predefined encoding
encoding = "GB18030"

#sg6000
[(?i)hillstone\.SG-6000-VM01\..*]
linebeak="\n"
prompt.login = "[[:alnum:]._\-~]+(\([[:alnum:]]+\))?# ?$"
prompt.configure = "[[:alnum:]._\-~]+(\([[:alnum:]]+\))?\(config\)# ?$"
# modes
mode.login = prompt.login
mode.configure = prompt.configure
# transtions
transition.login.configure = "configure"
transition.configure.login = "exit"
# error pattern
errs = "\^-+incomplete command", "\^-+unrecognized keyword\s+", "^Error:[\s\S]+"   
# predefined encoding
encoding = ""

#usg
[(?i)huawei\.usg[0-9]{0,}\..*]
linebeak="\n"
prompt.login = "<.{0,246}>$"
prompt.systemView = "\[.{0,246}]$"
prompt.Exclude = "-ui-console[0-9]"
prompt.Exclude1 = "-ui-vty[0-9]"
prompt.Exclude2 = "-policy-security"
# modes
mode.login = prompt.login
mode.systemView = prompt.systemView
# transtions
transition.login.system_View = "system-view"
transition.system_View.login = "quit"
# error pattern
errs = "^ ?Error:[\s\S]*"   
# predefined encoding
encoding = ""

#srx
[(?i)juniper\.v?srx\..*]
linebeak="\n"
prompt.login = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+> $"
prompt.config = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+# $"
prompt.loginWithoutHostname = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}> $"
prompt.configWithoutHostname = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}# $"
# modes
mode.login = prompt.login, prompt.loginWithoutHostname
mode.configure = prompt.config, prompt.configWithoutHostname
mode.configure_private = prompt.config, prompt.configWithoutHostname
mode.configure_exclusive = prompt.config, prompt.configWithoutHostname
# transtions
transition.login.configure_private = "configure private"
transition.configure_private.login = "exit"
transition.login.configure_exclusive = "configure exclusive"
transition.configure_exclusive.login = "exit"
transition.login.configure = "configure"
transition.configure.login = "exit"
# error pattern
errs = "^syntax error\\.$", "^unknown command\\.$", "^missing argument\\.$", "\\^$", "^error:"   
# predefined encoding
encoding = ""

#ssg
[(?i)juniper\.ssg\..*]
linebeak="\n"
prompt.login = ".*-> $"
# modes
mode.login = prompt.login
# transtions

# error pattern
errs = "\\^-+unknown keyword .+", "\\^-+command not completed", ": Duplicate entry", "^Service: Not found", "^Failed command -"  
# predefined encoding
encoding = ""

#centos
[(?i)linux\.centos\.(9|[0-9]{1,})]
linebeak="\n"
prompt.user = "\[(.*){1,}@(.*){0,} .*\](#|\$) $"
# modes
mode.login = prompt.user
# transtions

# error pattern
errs = ".*command not found.*", ".*No such file or directory.* ", ".*invalid option.*"  
# predefined encoding
encoding = ""

#panos
[(?i)paloalto\.(pan-os|Panorama)\..*]
linebeak="\n"
prompt.login = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+> $"
prompt.activeLogin = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+\(active\)> $"
prompt.configure = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+# $"
prompt.activeConfigure = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+\(active\)# $"
# modes
mode.login = prompt.login, prompt.activeLogin
mode.configure = prompt.configure, prompt.activeConfigure
# transtions
transition.login.configure = "configure"
transition.configure.login = "exit"
# error pattern
errs = "Invalid syntax\.", "^Server error :", "^Validation Error:", "^Unknown command:\s+"    
# predefined encoding
encoding = ""

#ngfw4000
[(?i)topsec\.NGFW4000(\-UF)?\..*]
linebeak="\n"
prompt.login = "[[:alnum:]]{1,}[-_[:alnum:]]{0,}# $"
prompt.login2 = "[[:alnum:]]{1,}[-_[:alnum:]]{0,}% $"
# modes
mode.login = prompt.login, prompt.login2
# transtions

# error pattern
errs = "^error"   
# predefined encoding
encoding = "ISO-8859-1"